import 'package:flutter/material.dart';
import 'package:ruserapp/bloc/user_list_bloc.dart';
import 'package:ruserapp/model/results.dart';
import 'package:ruserapp/networking/response_type.dart';

class RamdomUserList extends StatefulWidget {
  @override
  _RamdomUserListState createState() => _RamdomUserListState();
}

class _RamdomUserListState extends State<RamdomUserList> {
  UserListBloc _userListBloc;

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    _userListBloc = UserListBloc();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: new Text(
          'Random User',
          style: TextStyle(color: Colors.black, fontFamily: 'Montserrat'),
        ),
        backgroundColor: Colors.grey.shade200,
        centerTitle: true,
      ),
      body: new RefreshIndicator(
        backgroundColor: Colors.white,
        color: Colors.black,
        displacement: 100,
        onRefresh: () => _userListBloc.fetchRandomUser(),
        child: StreamBuilder<Response<Autogenerated>>(
          stream: _userListBloc.userListStream,
          builder: (context, snapshot) {
            if (snapshot.hasData) {
              switch (snapshot.data.status) {
                case Status.LOADING:
                  return Loading(
                    loadingMessage: snapshot.data.message,
                  );
                  break;
                case Status.COMPLETED:
                  return UserList(
                    userList: snapshot.data.data,
                  );
                  break;
                case Status.ERROR:
                  return Error(
                    errorMessage: snapshot.data.message,
                  );
                  break;
              }
            }
            return Column();
          },
        ),
      ),
    );
  }

  @override
  void dispose() {
    _userListBloc.dispose();
    super.dispose();
  }
}

class Loading extends StatelessWidget {
  final String loadingMessage;

  Loading({Key key, this.loadingMessage}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          Text(
            loadingMessage,
            style: TextStyle(color: Colors.black45, fontSize: 18.0, fontFamily: 'Montserrat'),
          ),
          SizedBox(
            height: 20.0,
          ),
//          CircularProgressIndicator(
//            valueColor: AlwaysStoppedAnimation<Color>(Colors.black45),
//          )
        ],
      ),
    );
  }
}

class UserList extends StatelessWidget {
  final Autogenerated userList;

  UserList({Key key, this.userList}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: ListView.separated(
          separatorBuilder: (context, index) => Divider(
                color: Colors.grey.shade300,
              ),
          physics: AlwaysScrollableScrollPhysics(),
          padding: EdgeInsets.all(18.0),
          itemCount: userList.results.length,
          itemBuilder: (BuildContext context, int position) {
            return ListTile(
              leading: new Container(
                width: 50.0,
                height: 50.0,
                decoration: new BoxDecoration(
                  color: const Color(0xff7c94b6),
                  image: new DecorationImage(
                    image: new NetworkImage(
                        '${userList.results[position].picture.large}'),
                    fit: BoxFit.cover,
                  ),
                  borderRadius: new BorderRadius.all(new Radius.circular(30.0)),
                  border: new Border.all(
                    color: Colors.white,
                    width: 2.0,
                  ),
                ),
              ),
              title: Text(
                '${userList.results[position].name.first} ${userList.results[position].name.last}',
                style: TextStyle(fontFamily: 'Montserrat'),
              ),
              subtitle: Text(
                '${userList.results[position].email}',
                style: TextStyle(
                    fontStyle: FontStyle.italic, fontFamily: 'Montserrat'),
              ),
              onLongPress: () {
                Navigator.of(context)
                    .push(new MaterialPageRoute(builder: (BuildContext ctx) {
                  return new RandomUserSwipe(
                      userIndex: position, resultUser: userList);
                }));
              },
              onTap: () {
                Scaffold.of(context).showSnackBar(new SnackBar(
                    content: Text(
                        '${userList.results[position].name.first} ${userList.results[position].name.last},\nLong press item to enlarge view.')));
              },
            );
          }),
    );
  }
}

class Error extends StatelessWidget {
  final String errorMessage;

  Error({Key key, this.errorMessage}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          Text(
            errorMessage,
            style: TextStyle(color: Colors.black45, fontSize: 18.0),
          ),
        ],
      ),
    );
  }
}

/*NEXT PAGE WITH SWIPE2X ANIMATION*/
class RandomUserSwipe extends StatefulWidget {
  final Autogenerated resultUser;
  final int userIndex;

  RandomUserSwipe({Key key, this.userIndex, this.resultUser}) : super(key: key);

  @override
  _RandomUserSwipeState createState() => _RandomUserSwipeState();
}

class _RandomUserSwipeState extends State<RandomUserSwipe> {
  PageController pageController;
  int currentUser = 0;

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    currentUser = widget.userIndex;
    pageController = new PageController(
      initialPage: currentUser,
      keepPage: false,
      viewportFraction: 0.5,
    );
  }

  @override
  void dispose() {
    pageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: BackButton(
          color: Colors.black,
        ),
        title: Text(
          '${widget.resultUser.results[currentUser].name.first} ${widget.resultUser.results[currentUser].name.last}',
          style: TextStyle(color: Colors.black, fontFamily: 'Montserrat'),
        ),
        backgroundColor: Colors.grey.shade200,
        centerTitle: true,
      ),
      body: Center(
        child: Column(
          children: <Widget>[
            Expanded(
              flex: 10,
              child: PageView.builder(
                  onPageChanged: (value) {
                    setState(() {
                      currentUser = value;
                    });
                  },
                  controller: pageController,
                  itemCount: widget.resultUser.results.length,
                  itemBuilder: (context, index) => builder(index)),
            ),
            Expanded(
              flex: 8,
              child: SingleChildScrollView(
                child: Padding(
                  padding: const EdgeInsets.only(left: 60.0),
                  child: Column(
                    children: <Widget>[
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Row(
                          children: <Widget>[
                            Icon(Icons.email),
                            SizedBox(
                              width: 15.0,
                            ),
                            Text('${widget.resultUser.results[currentUser].email}',
                                style: TextStyle(fontFamily: 'Montserrat')),
                          ],
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Row(
                          children: <Widget>[
                            Icon(Icons.home),
                            SizedBox(
                              width: 15.0,
                            ),
                            Text('${widget.resultUser.results[currentUser].location.city}' + ", " + '${widget.resultUser.results[currentUser].location.country}',
                                style: TextStyle(fontFamily: 'Montserrat')),
                          ],
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Row(
                          children: <Widget>[
                            Icon(Icons.call),
                            SizedBox(
                              width: 15.0,
                            ),
                            Text('${widget.resultUser.results[currentUser].phone}',
                                style: TextStyle(fontFamily: 'Montserrat')),
                          ],
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Row(
                          children: <Widget>[
                            Icon(Icons.phone_android),
                            SizedBox(
                              width: 15.0,
                            ),
                            Text('${widget.resultUser.results[currentUser].cell}',
                                style: TextStyle(fontFamily: 'Montserrat')),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  builder(int index) {
    return new AnimatedBuilder(
      animation: pageController,
      builder: (context, child) {
        double value = 1;
        if (pageController.position.haveDimensions) {
          value = pageController.page - index;
          value = (1 - (value.abs() * .5)).clamp(0.0, 1.0);
        }
        return new Center(
          child: new SizedBox(
            height: Curves.easeOut.transform(value) * 300,
            width: Curves.easeOut.transform(value) * 250,
            child: child,
          ),
        );
      },
      child: new Card(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(18.0),
        ),
        elevation: 10,
        margin: const EdgeInsets.all(8.0),
        child: Center(
          child: SingleChildScrollView(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                new Container(
                  width: 100.0,
                  height: 100.0,
                  decoration: new BoxDecoration(
                    color: const Color(0xff7c94b6),
                    image: new DecorationImage(
                      image: new NetworkImage('${widget.resultUser.results[index].picture.large}'),
                      fit: BoxFit.cover,
                    ),
                    borderRadius:
                        new BorderRadius.all(new Radius.circular(50.0)),
                    border: new Border.all(
                      color: Colors.white,
                      width: 4.0,
                    ),
                  ),
                ),
                SizedBox(
                  height: 20.0,
                ),
                Text(
                  '${widget.resultUser.results[index].login.username}',
                  style: TextStyle(
                      fontFamily: 'Montserrat',
                      color:
                          index % 2 == 0 ? Colors.grey.shade200 : Colors.black),
                  maxLines: 1,
                ),
              ],
            ),
          ),
        ),
        color: index % 2 == 0 ? Colors.black45 : Colors.grey.shade200,
      ),
    );
  }
}